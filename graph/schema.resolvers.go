package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"strconv"
	"time"

	"github.com/gustavovalle23/user-microservice-golang/graph/model"
	"github.com/gustavovalle23/user-microservice-golang/pkg/user/domain"
	"github.com/gustavovalle23/user-microservice-golang/pkg/user/usecases"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.CreateUserOutput, error) {

	createUserUseCase := usecases.NewCreateUserUseCase(r.userRepo)

	Month, err := strconv.Atoi(*input.BirthDate.Month)

	output, err := createUserUseCase.Execute(usecases.CreateUserInput{
		Name:       input.Name,
		Password:   input.Password,
		Email:      input.Email,
		DocumentNo: input.DocumentNo,
		Address: domain.Address{
			Street: input.Address.Street,
			State:  input.Address.State,
			City:   input.Address.City,
		},
		BirthDate: domain.Date{
			Day:   *input.BirthDate.Day,
			Year:  *input.BirthDate.Year,
			Month: time.Month(Month),
		},
	})

	if err != nil {
		return nil, err
	}

	return &model.CreateUserOutput{
		UserID: output.UserID,
	}, nil

}

// RootQuery is the resolver for the rootQuery field.
func (r *queryResolver) RootQuery(ctx context.Context) (string, error) {
	return "Hi", nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation(userRepo domain.UserRepository) MutationResolver {
	return &mutationResolver{userRepo: userRepo}
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// type mutationResolver struct{ *Resolver }

type mutationResolver struct {
	userRepo domain.UserRepository
}

type queryResolver struct{ *Resolver }
